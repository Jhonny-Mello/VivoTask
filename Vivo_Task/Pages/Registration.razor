@page "/registration"
@using Vivo_Task.Models
@using Vivo_Task.Services
@inject IAppService AppService;

<EditForm Model="@registrationModel" OnValidSubmit="Submit">
    <Blazorise.Card>
        <Blazorise.CardHeader>
            <h3>Registration</h3>
        </Blazorise.CardHeader>
        <Blazorise.CardBody>
            <DataAnnotationsValidator />

            <Blazorise.Div Flex="Blazorise.Flex.InlineFlex.JustifyContent.Around.Column.AlignItems.Center.AlignContent.Center"
                           Style="width:100%;"
                           VerticalAlignment="Blazorise.VerticalAlignment.Baseline">
                <div class="mb-2">
                    <img src="@_userAvatar" @onclick="DisplayAction" height="50" width="50" class="rounded-circle" />
                </div>
                <div class="form-text">
                    <input class="form-control" @bind-value="@registrationModel.Name" placeholder="Nome completo">
                    <ValidationMessage For="@(()=> registrationModel.Name)" />
                </div>
                <div class="form-text">
                    <input class="form-control" @bind-value="registrationModel.Matricula" type="number" placeholder="Matricula">
                    <ValidationMessage For="@(()=> registrationModel.Matricula)" />
                </div>
            </Blazorise.Div>

            <div class="form-group">
                <label>Email</label>
                <input type="email" class="form-control" @bind-value="@registrationModel.Email" placeholder="Email">
                <ValidationMessage For="@(()=> registrationModel.Email)" />
            </div>

            <div class="mt-2 form-group">
                <label>Senha</label>
                <input type="password" @bind-value="@registrationModel.Password" class="form-control" placeholder="Password">
                <ValidationMessage For="@(()=> registrationModel.Password)" />
            </div>

            <div class="mt-2 form-group">
                <label>Fixa</label>
                <div class="d-flex flex-row">
                    <div class="d-flex gap-2">
                        <div class="form-check">
                            <input @onchange="@(()=> registrationModel.Fixa=true)" class="form-check-input" type="radio" name="flexRadioDefault">
                            <label class="form-check-label" for="flexRadioDefault1">
                                Sim
                            </label>
                        </div>
                        <div class="form-check">
                            <input @onchange="@(()=> registrationModel.Fixa=false)" class="form-check-input" type="radio" name="flexRadioDefault">
                            <label class="form-check-label" for="flexRadioDefault2">
                                Não
                            </label>
                        </div>
                    </div>
                </div>
                <ValidationMessage For="@(()=> registrationModel.Fixa)" />
            </div>

            <div class="form-group">
                <select class="form-control-lg" @bind="registrationModel.Pdv">
                    <option value="">
                        Selecione
                    </option>
                </select>
                <ValidationMessage For="@(()=> registrationModel.Pdv)" />
            </div>

            <div class="form-group">
                <select class="form-control-lg" @bind="registrationModel.Regional">
                    <option value="">
                        Selecione
                    </option>
                </select>
                <ValidationMessage For="@(()=> registrationModel.Regional)" />
            </div>

        </Blazorise.CardBody>
        <Blazorise.CardFooter>

            <div class="text-center mt-2">
                <button class="btn btn-primary" type="submit">
                    <span class="@_spinnerClass" role="status" aria-hidden="true"></span>
                    Solicitar registro
                </button>
            </div>
        </Blazorise.CardFooter>
    </Blazorise.Card>
</EditForm>
@code {
    RegistrationModel registrationModel = new();
    private string _spinnerClass = "";
    private string _userAvatar = "images/usericon.png";
    private string _imageBase64Data;
    private async void Submit()
    {
        _spinnerClass = "spinner-border spinner-border-sm";

        if (!string.IsNullOrWhiteSpace(_imageBase64Data))
        {
            registrationModel.UserAvatar = _imageBase64Data;
        }

        _spinnerClass = "";
        this.StateHasChanged();
    }

    private async void DisplayAction()
    {
        string response = await App.Current.MainPage.DisplayActionSheet("Select Option", "OK", null, "Take Photo", "Add Photo");

        if (response == "Take Photo")
        {
            if (MediaPicker.Default.IsCaptureSupported)
            {
                var photo = await MediaPicker.Default.CapturePhotoAsync();
                if (photo != null)
                {
                    byte[] imageBytes;
                    var newFile = System.IO.Path.Combine(FileSystem.CacheDirectory, photo.FileName);
                    var stream = await photo.OpenReadAsync();

                    using (MemoryStream ms = new MemoryStream())
                    {
                        stream.CopyTo(ms);
                        imageBytes = ms.ToArray();
                    }
                    _imageBase64Data = Convert.ToBase64String(imageBytes);
                    _userAvatar = string.Format("data:image/png;base64,{0}", _imageBase64Data);
                    this.StateHasChanged();
                }
            }
        }
        else if (response == "Add Photo")
        {
            var photo = await MediaPicker.Default.PickPhotoAsync();
            if (photo != null)
            {
                byte[] imageBytes;
                var newFile = System.IO.Path.Combine(FileSystem.CacheDirectory, photo.FileName);
                var stream = await photo.OpenReadAsync();

                using (MemoryStream ms = new MemoryStream())
                {
                    stream.CopyTo(ms);
                    imageBytes = ms.ToArray();
                }
                _imageBase64Data = Convert.ToBase64String(imageBytes);
                _userAvatar = string.Format("data:image/png;base64,{0}", _imageBase64Data);
                this.StateHasChanged();
            }
        }
    }

}
